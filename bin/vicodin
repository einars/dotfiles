#!/usr/bin/env php
<?php

// run in background, monitor watson (https://github.com/TailorDev/Watson)
// and notify every X min 

define('TOTAL_SILENCE', false);

define('PATH_SOUND', '/home/e/bin/sound/');
define('SOUND_START', 'heroes/picking-4.ogg');
define('SOUND_PRE', 'heroes/picking-5.ogg');
define('SOUND_SUCCESS', 'heroes/new-hero-level.ogg');
define('SOUND_GLORY', 'heroes/new-week.ogg');
#define('SOUND_ENOUGH', 'totally-enough-2.ogg');
define('SOUND_ENOUGH', 'dirty-siren-40635.mp3');
//
define('SOUND_TEST', SOUND_PRE);
define('SOUND_NAG', 'heroes/new-week.ogg');

monitor_watson(getenv('HOME') . '/.config/watson/state');

function run_background($cmd)
{
    exec($cmd . ' > /dev/null &');
}

function watson_state($state_file)
{
    $s = json_decode(file_get_contents($state_file), true);

    if ( ! isset($s['project']) ) {
        return [
            'is_running' => false,
            'nudge' => false,
            'project' => null,
            'tags' => [],
            'elapsed' => null,
        ];
    }

    $tags = [];
    if (isset($s['tags'])) {
        $tags = $s['tags'];
    }


    $st = [
        'is_running' => true,
        'project' => $s['project'],
        'tags' => $tags,
    ];

    $elapsed = time() - $s['start'];
    $elapsed_min = (int)($elapsed / 60);

    $st['elapsed'] = $elapsed_min;

    return $st;

}

function say($message)
{
    printf("%s %s\n", date('Y-m-d H:i'), $message);
}

function say_and_notify($message, $category='default', $urgency='normal')
{
    say($message);
    system(sprintf('notify-send --category %s --urgency %s %s', $category, $urgency, escapeshellarg("Watson\n$message")));
}

function format_time($m)
{
    $h = (int)($m / 60);
    $m = $m % 60;

    if ($h) {
        return sprintf('%d %s and %d %s'
            , $h
            , $h === 1 ? 'hour' : 'hours'
            , $m
            , ($m % 10 === 1 && $m % 100 !== 11 ? 'minute' : 'minutes')
        );
    } else {
        return sprintf('%d %s'
            , $m
            , ($m % 10 === 1 && $m % 100 !== 11 ? 'minute' : 'minutes')
        );

    }
}


function format_time_s($s)
{
    $m = (int)($s / 60);
    $s = $s % 60;
    return sprintf('%dm %02ds', $m, $s);
}

$the_unlock_grace_time = null;

function should_nudge($slack_time_min, $dow, $hour)
{
    // print("should-nudge $slack_time_min\n");

    // $nudges = [5, 15, 17, 29];
    $nudges = [5, 6];

    return in_array($slack_time_min, $nudges);
}


function maybe_nudge($slack_time_min)
{
    if (should_nudge($slack_time_min, +date('N'), +date('G'))) {
        say_and_notify('Let\'s make something wonderful');
        make_notification_sound(SOUND_NAG);
    }
}



function to_string($state)
{
    $project = $state['project'];
    $time_elapsed = $state['elapsed'];
    if ( $project ) {
        if ($state['tags']) {
            $message = sprintf('Working on %s (%s) for %s.', $project, implode(', ', $state['tags']), format_time($time_elapsed));
        } else {
            $message = sprintf('Working on %s for %s.', $project, format_time($time_elapsed));
        }
    } else {
        $message = 'Doing nothing, just chill.';
    }
    return $message;
}


function make_notification_sound($sound)
{
    say("Playing sound $sound");
    if ( ! $sound) return;
    if (TOTAL_SILENCE) return;

    $hour = +date('H');
    $silent_hours = [21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7, 8];

    $file = PATH_SOUND . $sound;
    if (in_array($hour, $silent_hours)) {
        run_background("tt play-default \"$file\"");
    } else {
        run_background("tt play-all \"$file\"");
    }

}

function watson_notify($state, $sound = false)
{
    if ($sound) {
        make_notification_sound($sound);
    }
    say_and_notify(to_string($state));
}


function kill_watson () {
    say("Stopping watson");
    system('watson stop');
    /// run_background('tt wa.flow');
}

function maybe_notify_success($state) 
{
    $min_elapsed = $state['elapsed'];
    say("considering $min_elapsed");

    $sounds = [
                   0 => SOUND_START,
                  40 => SOUND_PRE,
                  45 => SOUND_SUCCESS,
             (45*2 - 5) => SOUND_PRE,
             (45*2) => SOUND_GLORY,
             (45*3) => SOUND_GLORY,
             (45*4) => SOUND_GLORY,
    ];

    if (isset($sounds[$min_elapsed])) {
        make_notification_sound($sounds[$min_elapsed]);
    } else if ($min_elapsed == 180) {
        system('watson stop');
        make_notification_sound(SOUND_ENOUGH);
    }

}


function monitor_watson($state_file)
{
    if ( ! file_exists($state_file) ) {
        die("No watson state file $state_file   found.\n");
    }

    // touch($state_file);
    // rewrite file completely to trigger my watchers
    file_put_contents($state_file, file_get_contents($state_file));


    // when booting up, play a sound to check the volume etc
    make_notification_sound(SOUND_TEST);

    say("Watson now takes some vicodin.");

    $current = watson_state($state_file);
    watson_notify($current);

    $last_seen_working = filemtime(getenv('HOME') . '/.config/watson/frames');

    $last_nudge = 0;

    while (true) {

        $s = watson_state($state_file);

        if ($s['project'] !== $current['project']) {
            // project changed in the background
            say(to_string($s));
            $last_nudge = 0;
        }

        if ($s['is_running']) {
            $last_seen_working = time();
            $last_nudge = 0;

            if ($current['elapsed'] !== $s['elapsed'])  {
                maybe_notify_success($s);
                // if ($n && $s['terminate-at-end']) {
                    // kill_watson(); // sic, avoid forever-long intervals
                // }
            }
        } else {

            if ($s['elapsed'] && $s['elapsed'] > $last_nudge) {
                $last_nudge = $s['elapsed'];
                maybe_nudge($s['elapsed']);
            }

            /*
            $slacking_for = floor((time() - $last_seen_working) / 60);
            if ($slacking_for > $last_nudge) {
                $last_nudge = $slacking_for;
                if ($slacking_for % 5 === 0) {
                    say(sprintf("Slacking for %s", format_time($slacking_for)));
                }
                maybe_nudge($slacking_for, $s);
            }
            */
        }

        $current = $s;

        // sleep(30);
        sleep(10);
    }
}
