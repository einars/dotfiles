#!/usr/bin/env php
<?php

// run in background, monitor watson (https://github.com/TailorDev/Watson)
// and notify every X min 

define('DEFAULT_BREAKPOINTS', [
    // time, min => sound
    25 => 'sound_pomodoro_complete.ogg',
    50 => 'sound_rank_earned.ogg',
    75 => 'sound_rank_earned.ogg',
    100 => 'sound_rank_earned.ogg',
]);

monitor_watson([
    'break-time' => 7,
    'state-file' => getenv('HOME') . '/.config/watson/state',
    'history-file' => getenv('HOME') . '/.config/watson/frames',
    'breakpoints' => DEFAULT_BREAKPOINTS,
    'aggregate-tags' => [],
]);


function watson_state($state_file, $opts)
{
    $s = json_decode(file_get_contents($state_file), true);

    if ( ! isset($s['project']) ) {
        return [
            'is_running' => false,
            'project' => null,
            'tags' => [],
            'elapsed' => null,
            'opts' => $opts,
        ];
    }

    $tags = '';
    if (isset($s['tags'])) {
        $tags = $s['tags'];
    } else {
        $tags = [];
    }


    $st = [
        'is_running' => true,
        'project' => $s['project'],
        'tags' => $tags,
        // 'elapsed' => (int)(() / 60),
        'opts' => $opts,
    ];

    $aggregate_tag = get_aggregate_tag($st);

    $elapsed = 0;

    if ($aggregate_tag) {
        $frames = json_decode(file_get_contents($opts['history-file']), true);
        $ts_min = strtotime("today 00:00");
        $ts_max = strtotime("tomorrow 00:00");
        foreach($frames as $f) {
            list($ts_from, $ts_to, $project, $id, $tags) = $f;
            if ((in_array($aggregate_tag, $tags) || $project === $aggregate_tag) and $ts_from >= $ts_min && $ts_to < $ts_max ) {
                $elapsed += ($ts_to - $ts_from);
            }
        }
    }

    $elapsed += time() - $s['start'];

    $st['elapsed'] = (int)($elapsed / 60);
    return $st;

}

function say($message)
{
    printf("%s %s\n", date('Y-m-d H:i'), $message);
}

function say_and_notify($message, $category='default', $urgency='normal')
{
    say($message);
    system(sprintf('notify-send --category %s --urgency %s %s', $category, $urgency, escapeshellarg("Watson\n$message")));
}

function format_time($m)
{
    $h = (int)($m / 60);
    $m = $m % 60;

    if ($h) {
        return sprintf('%d %s and %d %s'
            , $h
            , $h === 1 ? 'hour' : 'hours'
            , $m
            , ($m % 10 === 1 && $m % 100 !== 11 ? 'minute' : 'minutes')
        );
    } else {
        return sprintf('%d %s'
            , $m
            , ($m % 10 === 1 && $m % 100 !== 11 ? 'minute' : 'minutes')
        );

    }
}


function format_time_s($s)
{
    $m = (int)($s / 60);
    $s = $s % 60;
    return sprintf('%dm %02ds', $m, $s);

}



function get_aggregate_tag($state)
{
    $aggregate_tag = null;
    if (in_array($state['project'], $state['opts']['aggregate-tags'])) {
        return $state['project'];
    }
    foreach($state['tags'] as $t) {
        if (in_array($t, $state['opts']['aggregate-tags'])) {
            $aggregate_tag = $t;
            break;
        }
    }
    return $aggregate_tag;
}


function tell_about($state)
{
    $project = $state['project'];
    $time_elapsed = $state['elapsed'];
    if ( $project ) {
        if ($state['tags']) {
            $message = sprintf('Working on %s (%s) for %s.', $project, implode(', ', $state['tags']), format_time($time_elapsed));
        } else {
            $message = sprintf('Working on %s for %s.', $project, format_time($time_elapsed));
        }
    } else {
        $message = 'Doing nothing, just chill.';
    }
    say($message);
}


function make_notification_sound($sound)
{
    system('tt play.global.sound ~/bin/sound/' . $sound);
}

function watson_notify($state, $sound = false)
{
    if ($sound) {
        make_notification_sound($sound);
    }
    if ($state['is_running'])  {
        say_and_notify( sprintf('Working on %s for %s.', $state['project'], format_time($state['elapsed'])), 
            $category='chime',
            // $urgency=($sound ? 'critical' : 'normal')
            $urgency='normal'
        );
    } else {
        say_and_notify('Doing nothing, just chill.');
    }
}

function tag_match($state, $test_against)
{
    foreach($state['tags'] as $t) {
        if (in_array($t, $test_against)) return true;
    }
    return false;
}

function proj_match($state, $test_against)
{
    if (in_array($state['project'], $test_against)) return true;
    return false;
}

function monitor_watson($opts)
{

    $state_file   = opt('state-file', $opts, 'state');
    $breakpoints  = opt('breakpoints', $opts, DEFAULT_BREAKPOINTS);
    $break_time   = opt('break-time', $opts, 7);

    if ( ! file_exists($state_file  ) ) {
        die("No watson state file $state_file   found.\n");
    }


    make_notification_sound('sound_pomodoro_almost_complete.ogg');

    say("Watson now takes some vicodin.");

    $current = watson_state($state_file, $opts);
    watson_notify($current);

    $last_seen_working = filemtime(getenv('HOME') . '/.config/watson/frames');
    $slacking_notified = false;

    while (true) {

        $s = watson_state($state_file, $opts);

        if ($s['project'] !== $current['project']) {
            tell_about($s);
        }

        if ($s['is_running']) {
            $last_seen_working = time();
            $slacking_notified = false;
        } else {

            $slacking_for = (time() - $last_seen_working) / 60;
            if ($slacking_for > $break_time && ! $slacking_notified) {
                say(sprintf("Slacking for %.1d mins", $slacking_for));
                $slacking_notified = true;
                say_and_notify('Enough slacking, back to work!', $category='whatever', $urgency='critical');
                make_notification_sound('sound_break_complete.ogg');
            }


        }


        if ($s['is_running'] ) {
            if (($current['elapsed'] !== $s['elapsed']) and ($s['elapsed'] !== 0) and (isset($breakpoints[$s['elapsed']]))) {
                printf("!!! %d %d %s\n",$current['elapsed'], $s['elapsed'], $breakpoints[$s['elapsed']] );
                watson_notify($s, $sound = $breakpoints[$s['elapsed']]);
            }
        }

        $current = $s;

        sleep(30);
        // sleep(5);
    }
}

function opt($opt, $opts, $default = null)
{
    if (array_key_exists($opt, $opts)) {
        return $opts[$opt];
    }
    return $default;
}

