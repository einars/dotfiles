#!/usr/bin/env bash

classname=gvim
desktop=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')

echo "Desktop $desktop"

# no gvim on some desktops
[ "$desktop" == "7" ] && exit -1
[ "$desktop" == "8" ] && exit -1
[ "$desktop" == "9" ] && exit -1

rolename=gvimconsole_$desktop

# parallel execution/frequent switching sometimes fails with
#  X Error of failed request:  BadWindow (invalid Window parameter)
#  Major opcode of failed request:  3 (X_GetWindowAttributes)
wid=failed
until echo $wid | grep -v failed; do
  wid=$(xdotool search --all --name --classname $classname 2>&1)
done

found=
for f in ${wid}; do
    hex=$(printf '%08x' $f)
    echo "Testing $f | $hex..."
    window_role=$(xprop -id $f _OB_APP_ROLE)
    echo Rolename=$window_role

    if echo $window_role | grep -q $rolename; then
        found=$f
        if [ "$1" == "--hide" ]; then
            echo 'Force hide'
            xdotool windowunmap $f
        else
          if wmctrl -l -p | grep -q $hex; then
            if [[ $(xwininfo -id 0x$hex | grep 'Map State' | awk '{print $3}') == "IsUnMapped" ]]; then
              echo "Minimized $hex, restoring"
              xdotool windowmap $f
            else
              echo "Visible $hex, bringing down"
              xdotool windowunmap $f
            fi
          else
              echo "Iconic $hex, bringing up"
              xdotool windowmap $f
              xdotool windowactivate $f
          fi
        fi
    fi
done

if [ -z $found ]; then
  echo Running a new gvim
  exec gvim --role $rolename
  #exec gvim --role $rolename -c "colors sorcerer"
fi
