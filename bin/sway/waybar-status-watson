#!/usr/bin/env python

import sys
import argparse
from inotify_simple import INotify, flags
import json
import time
from pathlib import Path

import sh

from threading import Timer

Lightning = '\uf0e7\uf0e7\uf0e7'

state_path = Path.home() / '.config' / 'watson' / 'state'
frames_path = Path.home() / '.config' / 'watson' / 'frames'

def get_watson_state():

  vicodin = False
  lines = [l for l in sh.ps('ax').split('\n')]
  lines = [l for l in lines if 'bin/vicodin' in l]

  vicodin = len(lines) > 0

  o = {
    "state": "idle",
    "elapsed": None,
    "project": None,
    "vicodin-running": vicodin,
    "tags": [],
  }

  if state_path.exists():
    with state_path.open() as f:
      state = json.load(f)

      if 'project' in state:

        proj = [state["project"]] + [ "+{}".format(t) for t in state["tags"] ]

        o["tags"] = state['tags']
        o["state"] = 'running'
        o["project"] = ' '.join(proj)
        o["elapsed"] = (time.time() - state["start"]) * 1.0 / 60

  if o['state'] == 'idle' and frames_path.exists():
    with frames_path.open() as f:
      frames = json.load(f)
      o['elapsed'] = (time.time() - max([t[1] for t in frames])) * 1.0 / 60

  return o


def pips(cur, max, pipses):
  out = []
  cur = int(cur)
  if cur == 0:
    cur = 1
  if max == None:
    for i in range(0, int(cur / 45 + 1)):
      out.append(pipses['fire'])
      out.append(" ")
  else:

    if cur > max: cur = max
    for i in range(0, max):
      if i >= cur:
        out.append(pipses[False])
      else:
        out.append(pipses[True])
      if (i + 1) % 10 == 0:
        out.append(pipses[" "])
  return "".join(out)
  
def fmt_duration(dur):
  h = int(dur / 60)
  m = dur % 60
  if h > 4:
    return ''
  if h < 2:
    return '{}m'.format(dur)

  return '{}h {}m'.format(h, m)


def on_change():
  state = get_watson_state()
  if state["state"] == "idle" and state["elapsed"] == None:
    #text = 'chill ' + '\uf0e7'
    text = Lightning
    if not state["vicodin-running"]:
      text += ' (no vicodin)'
    sys.stdout.write('{ "text": "' + text + '", "alt": "", "class": ["task", "task--idle"] }')
  elif state["state"] == "idle" and state["elapsed"] != None:
    ## color = '#a3be8c'
    color = '#c3c36c'
    elapsed = state["elapsed"]
    duration = fmt_duration(round(elapsed))

    text = '<span color="{color}">{duration}  {ico}</span>'.format(
      xico='   ',
      ico='Zzz...',
      duration=duration,
      color=color,
    )

    if not state["vicodin-running"]:
      text += ' (no vicodin)'

    sys.stdout.write('{ "text": %s, "class": ["task", "task--active"] }' % json.dumps(text))

  else:
    progress = ''
    elapsed = state["elapsed"]

    elt = {
      True: "━",
      False: "-",
      " ": "\u2009",
      "fire": '\uf0e7',
    }

    color = 'red'

    len = None
    if '45' in state['tags']:
      len = 45
    if '25' in state['tags']:
      len = 25

    if len == None or elapsed > len:
      color = '#c1f40f'

    progress = pips(elapsed, len, elt)

    if False:
      tick = True
      minutes_in_bar = len

      ppm = 280 // minutes_in_bar

      e = elapsed % minutes_in_bar
      ppm_frac = 1.0 / ppm
      for f in range(0, minutes_in_bar):
        for sub in range(1, ppm + 1):
          cutoff = f + ((sub + 1) * 1.0) / ppm
          if e < cutoff:
            tick = False
          progress += elt[tick]
        progress += '\u2009'


    duration = '{}m'.format(int(elapsed))
    #duration = '{:.4} m'.format(elapsed)

    #progress = ''

    text = '<span color="{color}">{progress}</span>  {project}, {duration}  <span color="{ltcolor}">{lightning}</span>'.format(
      progress=progress,
      project=state["project"],
      duration=duration,
      color=color,
      ltcolor='#ffcc33',
      lightning = Lightning,
    )

    if not state["vicodin-running"]:
      text += ' (no vicodin)'

    sys.stdout.write('{ "text": %s, "class": ["task", "task--active"] }' % json.dumps(text))

  sys.stdout.write("\n")
  sys.stdout.flush()
  return state

have_timer = False

def on_timer():
  global have_timer
  have_timer = False
  setup_timer(on_change())

def setup_timer(state):
  global have_timer
  if not have_timer:
    if state["state"] == "running":
      have_timer = True
      t = Timer(10, on_timer)
      t.start()
    else:
      have_timer = True
      t = Timer(10, on_timer)
      t.start()


def setup_watch():

  # sys.stderr.write("Setting up file watches on {}\n".format(state_path))
  # sys.stderr.flush()

  i = INotify()
  i.add_watch(str(state_path.parent), flags.CREATE | flags.MODIFY)


  setup_timer(on_change())

  ignore_events = ['IN_ACCESS', 'IN_OPEN', 'IN_CLOSE_NOWRITE', 'IN_IGNORED', 'IN_ATTRIB']
  for evt in i.read():
    (x, type_names, path, filename) = evt
    if filename == 'state':
      use_this_event = False
      for t in type_names:
        if t not in ignore_events:
          use_this_event = True

      if use_this_event:
        setup_timer(on_change())




def main():

  p = argparse.ArgumentParser()
  p.add_argument('--single', help='Single-shot mode: do not watch watson state for changes', action="store_true")
  args = p.parse_args()


  if args.single:
    on_change()
    return

  setup_watch()


if __name__ == "__main__":
    main()


# vim: set sw=2 :
