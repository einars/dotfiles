#!/usr/bin/env python

import sys
import argparse
import inotify.adapters
import json
import time
from pathlib import Path

from threading import Timer


state_path = Path.home() / '.config' / 'watson' / 'state'

def get_watson_state():

  o = {
    "state": "idle",
    "elapsed": None,
    "project": None,
  }

  if state_path.exists():
    with state_path.open() as f:
      state = json.load(f)

      if 'project' in state:

        proj = [state["project"]] + [ "+{}".format(t) for t in state["tags"] ]

        o["state"] = 'running'
        o["project"] = ' '.join(proj)
        o["elapsed"] = (time.time() - state["start"]) * 1.0 / 60


  return o



def on_change():
  state = get_watson_state()
  if state["state"] == "idle":
    sys.stdout.write('{ "text": "chill", "alt": "", "class": ["task", "task--idle"] }')
  else:
    progress = ''
    elapsed = state["elapsed"]

    elt = {
      True: "━",
      False: "┄",
    }

    color = 'red'

    e = elapsed
    if e > 25:
      color = '#c1f40f'
      e -= 25

    hearts = ''
    if elapsed > 40:
      hearts += '❤️'

    tick = True

    ppm = 10
    ppm_frac = 1.0 / ppm
    for f in range(0, 25):
      for sub in range(0, ppm):
        cutoff = f + ((sub + 1) * 1.0) / ppm
        if e < cutoff:
          tick = False
        progress += elt[tick]
      progress += '\u2009'


    duration = '{}m'.format(int(elapsed))
    #duration = '{:.4} m'.format(elapsed)
    sys.stdout.write('{{ "text": "{hearts} <span color=\\"{color}\\">{progress}</span>  {project}, {duration}", "alt": "", "class": ["task", "task--active"] }}'.format(
      progress=progress,
      project=state["project"],
      duration=duration,
      color=color,
      hearts=hearts))

  sys.stdout.write("\n")
  sys.stdout.flush()
  return state

have_timer = False

def on_timer():
  global have_timer
  have_timer = False
  setup_timer(on_change())

def setup_timer(state):
  global have_timer
  if not have_timer and state["state"] == "running":
    have_timer = True
    t = Timer(6, on_timer)
    t.start()


def setup_watch():

  # sys.stderr.write("Setting up file watches on {}\n".format(state_path))
  # sys.stderr.flush()

  i = inotify.adapters.Inotify()
  i.add_watch(str(state_path.parent))


  setup_timer(on_change())

  ignore_events = ['IN_ACCESS', 'IN_OPEN', 'IN_CLOSE_NOWRITE', 'IN_IGNORED', 'IN_ATTRIB']
  for evt in i.event_gen(yield_nones = False):
    (x, type_names, path, filename) = evt
    if filename == 'state':
      use_this_event = False
      for t in type_names:
        if t not in ignore_events:
          use_this_event = True

      if use_this_event:
        setup_timer(on_change())




def main():

  p = argparse.ArgumentParser()
  p.add_argument('--single', help='Single-shot mode: do not watch watson state for changes', action="store_true")
  args = p.parse_args()


  if args.single:
    on_change()
    return

  setup_watch()


if __name__ == "__main__":
    main()


# vim: set sw=2 :
