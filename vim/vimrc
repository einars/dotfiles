set ttimeoutlen=100

let g:loaded_matchparen=1             " die, slow and needless matching paren highlighting
let g:searchEmptyLinesPostfixing = 3  " php folding stuff
let g:cursor_follows_alphabet = 1     " translit plugin

let mapleader=","

set showmatch               " jump to matching paren quickly
set matchtime=1

" sadly, autoindentations tend to go haywire with this
" set matchpairs=(:)

set history=1000

set nrformats=hex               " c-a, c-x won't treat 05 as octal
set wildmenu                    " filename etc completion on tab
set wildmode=full
set t_md=                       " no bold fonts in terminal

set mouse=a                   " mouse support in console

set scrolloff=3

set nostartofline

set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround                  " shift in mod 4

set nojoinspaces " with joinspaces, two spaces are entered after . / ? / !

set splitright " split on the correct side

set expandtab
set autoindent
set wildchar=<Tab>

set laststatus=2                " good statusline is good
set statusline=%<%f\%h%m%r%=%-20.(%L\ %l:%v\ %)\ \ \%h%m%r%=\%P


set wildignore=*.cmi,*.cmx,*.cmo,*.class,*.pyc,.svn,.git,*.o,*.a,*.so,*.jpg,*.gif,*.png
set suffixes-=.h

" allow moving past end of lines when selecting vertical blocks with ^V
set virtualedit=block

set backspace=indent,eol,start  " usable backspace

set hlsearch
set incsearch
set ignorecase                  " search ignores case while no uppercase is searched
set smartcase
set nowrap                      " dont' wrap the text

set nobackup                    " this is a default, but let's say it explicitly (who knows what's in /etc/vimrc)
set writebackup                 " backup while saving is good. this is a default as well.
set noswapfile                  " can't remember a single time this would have been useful


set textwidth=120               " screw purists


set hidden                      " suddenly, magically, buffers get usable
set autoread                    " don't care about ext-modified files, just reload them


set list
set listchars=tab:··
"set listchars=tab:▸\           " listchars


filetype plugin indent on       " detect filetypes
syntax on                       " colors


" micro-templates: autoload template

set cpoptions-=a " do not leave the template file open
autocmd BufNewFile * silent! 0r ~/.vim/templates/%:e.tpl



" Sane tabbing — tab vs autocomplete

function! InsertTabWrapper(direction)
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    elseif a:direction == "back"
        return "\<c-p>"
    else
        return "\<c-n>"
    endif
endfunction




""" Convenient command to see the difference between the current buffer and the
""" file it was loaded from, thus the changes you made.
"""
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis



if has('gui_running')

    """ I automatically :wq main vim much more often than I need to.
    """ So here I get rid of the wq command.
    cnoreabbr wq w


    """ laptop shift
    cnoreabbr Wq w
    cnoreabbr W w

    " et guifont=Consolas\ 12          " too blurry for me
    " et guifont=Inconsolata\ 12       " very nice, but leaves terrible artefacts with national (mostly russian) characters
    set guifont=Terminus\ 10          " wonderful, yet smallish, and sucks at larger sizes
    " set guifont=Droid\ Sans\ Mono\ 11
    " et guifont=DejaVu\ Sans\ Mono\ 8
    set guifont=Terminus\ 9          " wonderful, yet smallish, and sucks at larger sizes

    set guioptions+=c       """ use console dialogs, not the gui ones
    set guioptions-=T       """ don't show the toolbar
    set guioptions-=m       """ don't show the menu
    set guioptions-=r       """ don't need right scrollbar
    set guioptions-=L       """ don't show left scrollbar

    """ gvim doesn't want to work nice with x clipboard
    map! <s-insert> <c-r>*

    """ gvim weirdnesses
    map  <S-CR> <CR>
    imap <S-CR> <CR>



    """ i hate blinking cursor
    let &guicursor = &guicursor . ",a:blinkon0"

    colorscheme xoria256-mine

else
    cnoreabbr W w
    cnoreabbr Wq wq
    colorscheme desert
end


""" only underline on search

hi clear Search
hi Search cterm=underline gui=underline





hi link htmlTag htmlTagName
hi link htmlEndTag htmlTagName

""" make and set path for temp files

function! l:SetDir(path)
    if ! isdirectory(a:path) && exists('*mkdir')
        exec mkdir(a:path, '', 0700)
    endif
    if isdirectory(a:path)
        exec 'set dir=' . a:path
        exec 'set backupdir=' . a:path
    endif
endfunction


call l:SetDir($HOME . '/.vim-swap')



"""
"""
""" /// here go keymaps
"""
"""


" allow deleting selection without updating the yank buffer
vnoremap x "_x
vnoremap X "_X


"  too frequent misclick on the thinkpad
map! <f1> <esc>


" let's try this omnicompletion thing
inoremap <C-Space> <C-X><C-O>

"
" Enable spellchecking conditionally
"
map <Leader>se :setlocal spell spelllang=en_us<CR>
map <Leader>sl :setlocal spell spelllang=lv_lv<CR>
map <Leader>sn :setlocal nospell<CR>

" S&M

imap <c-up>     <Nop>
imap <c-down>   <Nop>
imap <c-left>   <Nop>
imap <c-right>  <Nop>
map  <c-up>     <Nop>
map  <c-down>   <Nop>
map  <c-left>   <Nop>
map  <c-right>  <Nop>

imap <up>       <Nop>
imap <down>     <Nop>
imap <left>     <Nop>
imap <right>    <Nop>
map  <up>       <Nop>
map  <down>     <Nop>
map   <left>    <Nop>
map  <right>    <Nop>

imap <pageup>   <nop>
imap <pagedown> <nop>
imap <home>     <nop>
imap <end>      <nop>
map  <pageup>   <nop>
map  <pagedown> <nop>
map  <home>     <nop>
map  <end>      <nop>

imap <del>      <nop>
imap <c-del>    <nop>
imap <m-del>    <nop>
map  <del>      <nop>
map  <c-del>    <nop>
map  <m-del>    <nop>

imap <c-pageup>     <nop>
imap <c-pagedown>   <nop>
map  <c-pageup>     <nop>
map  <c-pagedown>   <nop>


inoremap <f1> <esc>
nnoremap <f1> <esc>
vnoremap <f1> <esc>

" k/j move by screen lines, not physical lines

nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

" navigate buffers with ^z and ^c

imap <c-z> <esc>:bp<cr>
imap <c-c> <esc>:bn<cr>
map  <c-z> :bp<cr>
map  <c-c> :bn<cr>



"" navigate tabs with M-z and M-c
"
"imap <m-z> <esc>:tabp<cr>
"imap <m-c> <esc>:tabn<cr>
"map  <m-z> :tabp<cr>
"map  <m-c> :tabn<cr>



" no need for shift to enter command mode

nnoremap ; :


" use real tab on c-tab

imap <c-tab> <c-v><tab>


" microtemplates: ,j moves to next block marked by <+SOMETHING+>
nnoremap <leader>j /<+.\{-1,}+><cr>c/+>/e<cr>



" human tabs

inoremap <tab>   <c-r>=InsertTabWrapper("fwd")<cr>
inoremap <s-tab> <c-r>=InsertTabWrapper("back")<cr>


" c-space is omnicompletion

inoremap <nul> <c-x><c-o>


" PHP stuff: rebuild folds on s-f5

map <s-f5> <esc>:EnableFastPHPFolds<cr>


" resync colors on f5

map <f5> <esc>:syn sync fromstart<cr>


" f3 = select all to X clipboard

map <f3> <esc>mpgg"+yG`p
map <c-.> <esc>mpgg"+yG`p


" nedtree

nmap <Leader>no :NERDTree<CR>
nmap <Leader>nt :NERDTreeToggle<CR>
nmap <Leader>nf :NERDTreeFind<CR>
nmap <Leader>nm :NERDTreeMirror<CR>
nmap <Leader>nc :NERDTreeClose<CR>

function! CleanDeleteBuffer()
    """ based on CleanClose function, found somewhere
    " just do not save the buffer under no circumstances
    let todelbufNr = bufnr("%")
    let newbufNr = bufnr("#")
    if ((newbufNr != -1) && (newbufNr != todelbufNr) && buflisted(newbufNr))
        exe "b".newbufNr
    else
        bnext
    endif

    if (bufnr("%") == todelbufNr)
        new
    endif
    exe "bd!".todelbufNr
endfunction

" close buffer leaving splits intact

map <leader>d <esc>:call CleanDeleteBuffer()<cr>

" automatically remove trailing whitespace before write
function! StripTrailingWhitespace()
  normal mZ
  %s/\s\+$//e
  if line("'Z") != line(".")
    echo "Stripped whitespace\n"
  endif
  normal `Z
endfunction




" let's try this magic
imap jj <Esc>

" get rid of search highlighting with leader-space
nnoremap <leader><space> :noh<cr>
nnoremap <leader>s :call StripTrailingWhitespace()<cr>
nnoremap <leader>S :retab<cr>:call StripTrailingWhitespace()<cr>

" select previous paste
nnoremap <leader>v V`]

" ,e - various common editors
nnoremap <leader>ev :e ~/.vimrc<cr>
nnoremap <leader>ez :e ~/.zshrc<cr>
nnoremap <leader>ex :e ~/.xmonad/xmonad.hs<cr>
nnoremap <leader>ec :e ~/commands<cr>

" sort css properties
nnoremap <leader>C ?{<CR> V/}$<CR>k:sort<CR>:noh<CR>



augroup Python
    au FileType python setlocal nosmartindent autoindent
augroup END

augroup javascript
    au FileType javascript setlocal nosmartindent autoindent
augroup END

augroup latex
    autocmd!
    autocmd FileType tex setlocal shiftwidth=2 softtabstop=2
    let g:tex_flavor = 'latex'
augroup END

augroup Make
    autocmd!
    autocmd FileType make setlocal noexpandtab shiftwidth=8 tabstop=8
augroup END

augroup Haskell
    autocmd!
    autocmd FileType haskell setlocal expandtab shiftwidth=8 tabstop=8
augroup END

augroup OCaml
    autocmd!
    autocmd FileType ocaml setlocal tabstop=2 shiftwidth=2 expandtab
augroup END

augroup Python
    autocmd!
    autocmd FileType python setlocal tabstop=4 shiftwidth=4 expandtab
augroup END

augroup Javascript
    autocmd!
    autocmd FileType javascript setlocal tabstop=4 shiftwidth=4 expandtab nocindent smartindent
augroup END

""" subtly tell when lines are too long

highlight RedundantSpaces term=standout ctermbg=red guibg=red

au BufRead,BufNew *.* let w:m1=matchadd('Error', '\%120v.')
au BufRead,BufNew *.* let w:m3=matchadd('Todo', '<+\w\++>')
au BufRead,BufNew *.* let w:m4=matchadd('RedundantSpaces', '\s\+$\| \+\ze\t') "\ze sets end of match so only spaces highlighted
au BufRead,BufNew *.* call matchadd('Todo', '\(!!!\|///\).*', -1)

autocmd FileType c,cpp,java,php,python,markdown,javascript,css,ocaml,scheme,lisp autocmd BufWritePre <buffer> :retab
autocmd FileType c,cpp,java,php,python,markdown,javascript,css,ocaml,scheme,lisp autocmd BufWritePre <buffer> :call StripTrailingWhitespace()

autocmd FileType php setlocal keywordprg=~/bin/phpdoc
autocmd FileType inc setlocal syn=php


source ~/.vim/jeetworks-arrows.vim
