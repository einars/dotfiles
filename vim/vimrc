
let g:loaded_matchparen=1             " die, slow and needless matching paren highlighting
let g:searchEmptyLinesPostfixing = 3  " php folding stuff
let g:cursor_follows_alphabet = 1     " translit plugin
let g:translit_toggle_keymap = '<S-F1>'     " translit plugin

let g:ycm_key_detailed_diagnostics = '<F11>'

" let wiki = {}
" let wiki.path = '~/dokumenti/wiki/'
" let g:vimwiki_list = [ wiki ]

let mapleader=","

" sadly, autoindentations tend to go haywire with this
" set matchpairs=(:)

set nottyfast
set cursorline
set noundofile
set lsp=5
set cryptmethod=blowfish
set ttimeoutlen=100
set synmaxcol=300
set history=1000
set showmatch           " jump to matching paren quickly
set matchtime=1
set nrformats=hex       " c-a, c-x won't treat 05 as octal
set wildmenu            " filename etc completion on tab
set wildmode=full
set t_md=               " no bold fonts in terminal
set scrolloff=15
set nostartofline
set tabstop=8
set softtabstop=2
set shiftwidth=2
set shiftround          " shift in mod 4
set nojoinspaces        " with joinspaces, two spaces are entered after . / ? / !
set splitright          " split on the correct side
set expandtab
set autoindent
set wildchar=<Tab>
set laststatus=2        " good statusline is good
" set statusline=%<%f\%h%m%r%=%-20.(%L\ %l:%v\ %)\ \ \%h%m%r%=\%P
set statusline=%<%f\%h%m%r\ %{fugitive#statusline()}%=%-20.(%L\ %l:%v\ %)\ \ \%h%m%r%=\%P
set wildignore=*.cmi,*.cmx,*.cmo,*.class,*.pyc,.svn,.git,*.o,*.a,*.so
set suffixes-=.h
set virtualedit=block

set completeopt-=preview

" mksession ~/sessions/session.vim
set ssop-=options " do not store local/global values in a session
set ssop-=folds " do not store folds in a session

set background=dark
                        " allow moving past end of lines when selecting
                        "    vertical blocks with ^V
set bs=indent,eol,start " usable backspace
set hlsearch
set incsearch
set ignorecase          " search ignores case while no uppercase is searched
set smartcase
set nowrap              " dont' wrap the text
set nobackup            " this is a default, but let's say it explicitly
                        "    (who knows what's in /etc/vimrc)
set nowritebackup       " don't care about vim's backups at all
set noswapfile          " can't remember a single time this would have been useful

"   viminfo
"       'N  - keep the registeres for N files
"       "N  - how many lines to save per register
"       fN  - keep global regs? yes: N==1; no N==0
"       :N  - keep N :commands
"       /N  - keep N search patterns
"       @N  - keep N items of input-line history
"             see ':help input()'
"       h   - no hlsearch when starting up
set viminfo='250,\"250,f1,:500,/500,@500

set display=lastline,uhex
set lazyredraw


"set textwidth=120       " screw purists
" set textwidth=75         " meh

set hidden              " suddenly, magically, buffers get usable
set autoread            " don't care about ext-modified files, just reload them

" show or hide whitespace warnings
set list
" set nolist """ coprogrammers

set listchars=tab:·\ ,trail:.,extends:#,nbsp:▮
if has('conceal')
    set conceallevel=2      " 7.3, if supported
endif

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'airblade/vim-rooter'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-unimpaired'
Bundle 'spiiph/vim-space'
" Bundle 'scrooloose/nerdcommenter'
Bundle 'einars/vim-phpfold'
Bundle 'einars/vim-phpsyntax'
Bundle 'einars/translit.vim'

Bundle 'Valloric/YouCompleteMe'

Bundle 'pangloss/vim-javascript'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'junegunn/goyo.vim'

Bundle 'kien/ctrlp.vim'
Bundle 'w0ng/vim-hybrid'

Bundle 'stephpy/vim-yaml'
Bundle 'derekwyatt/vim-scala'

Bundle 'dart-lang/dart-vim-plugin'
Bundle 'digitaltoad/vim-jade'
Bundle 'kchmck/vim-coffee-script'

let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](\.git|\.svn|media|release|node_modules|bower_components|burvis\/app)$',
  \ 'file': '\v\.(class|so|o|pyc)$',
  \ }

filetype plugin indent on  " detect filetypes
syntax on                  " colors


" micro-templates: autoload template
set cpoptions-=a        " do not leave the template file open
autocmd BufNewFile * silent! 0r ~/.vim/templates/%:e.tpl






""" Convenient command to see the difference between the current buffer and the
""" file it was loaded from, thus the changes you made.
"""
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis



if has('gui_running')

    """ I automatically :wq main vim much more often than I need to.
    """ So here I get rid of the wq command.
    cmap wq w
    set mouse= " don't need mouse in gui at all

    "set guifont=Monaco\ 9
    " set guifont=Source\ \Code\ Pro\ 10
    set guifont=Terminus\ 10

    set guioptions+=c       """ use console dialogs, not the gui ones
    set guioptions-=T       """ don't show the toolbar
    set guioptions-=m       """ don't show the menu
    "set guioptions-=r       """ don't need right scrollbar
    set guioptions-=L       """ don't show left scrollbar
    set guioptions-=e       """ don't show tab menu

    """ gvim weirdnesses
    map  <S-CR> <CR>
    imap <S-CR> <CR>



    """ i hate blinking cursor
    let &guicursor = &guicursor . ",a:blinkon0"

else
    cnoreabbr W w
    cnoreabbr Wq wq
    set mouse=

end

" colorscheme dual
" colorscheme seoul256-light
colorscheme seoul256


""" only underline on search

hi link htmlTag htmlTagName
hi link htmlEndTag htmlTagName

hi clear Conceal
hi link Conceal Statement

""" make and set path for temp files

function! SetDir(path)
    if ! isdirectory(a:path) && exists('*mkdir')
        exec mkdir(a:path, '', 0700)
    endif
    if isdirectory(a:path)
        exec 'set dir=' . a:path
        exec 'set backupdir=' . a:path
    endif
endfunction


call SetDir($HOME . '/.vim-swap')



"""
"""
""" /// here go keymaps
"""
"""

" {{{ KEYMAPS


"  too frequent misclick on the thinkpad
map! <f1> <esc>

inoremap <f1> <esc>
nnoremap <f1> <esc>
vnoremap <f1> <esc>


"
" Enable spellchecking conditionally
"
map <Leader>le :setlocal spell spelllang=en_us<CR>
map <Leader>ll :setlocal spell spelllang=lv_lv<CR>
map <Leader>ln :setlocal nospell<CR>

" S&M {{{

imap <c-up>     <Nop>
imap <c-down>   <Nop>
imap <c-left>   <Nop>
imap <c-right>  <Nop>
map  <c-up>     <Nop>
map  <c-down>   <Nop>
map  <c-left>   <Nop>
map  <c-right>  <Nop>

imap <up>       <Nop>
imap <down>     <Nop>
imap <left>     <Nop>
imap <right>    <Nop>
map  <up>       <Nop>
map  <down>     <Nop>
map   <left>    <Nop>
map  <right>    <Nop>

imap <pageup>   <nop>
imap <pagedown> <nop>
imap <home>     <nop>
imap <end>      <nop>
map  <pageup>   <nop>
map  <pagedown> <nop>
map  <home>     <nop>
map  <end>      <nop>

imap <del>      <nop>
imap <c-del>    <nop>
imap <m-del>    <nop>
map  <del>      <nop>
map  <c-del>    <nop>
map  <m-del>    <nop>

imap <c-pageup>     <nop>
imap <c-pagedown>   <nop>
map  <c-pageup>     <nop>
map  <c-pagedown>   <nop>

" }}}



" k/j move by screen lines, not physical lines

nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

" navigate buffers with ^z and ^c

imap <c-z> <esc>:bp<cr>
imap <c-c> <esc>:bn<cr>
map  <c-z> :bp<cr>
map  <c-c> :bn<cr>



"" navigate tabs with M-z and M-c
"
"imap <m-z> <esc>:tabp<cr>
"imap <m-c> <esc>:tabn<cr>
"map  <m-z> :tabp<cr>
"map  <m-c> :tabn<cr>




" use real tab on c-tab

imap <c-tab> <c-v><tab>


" microtemplates: ,j moves to next block marked by <+SOMETHING+>
nnoremap <leader>j /<+.\{-1,}+><cr>c/+>/e<cr>



" PHP stuff: rebuild folds on s-f5
map <s-f5> <esc>:EnableFastPHPFolds<cr>

" resync colors on f5
map <f5> <esc>:syn sync fromstart<cr>

" let's try this magic
imap jh <Esc>

" get rid of search highlighting with leader-space
nnoremap <leader><space> :noh<cr>
nnoremap <leader>R :call StripTrailingWhitespace()<cr>
nnoremap <leader>r :retab<cr>:call StripTrailingWhitespace()<cr>

" select previous paste
nnoremap <leader>v V`]

" ,e - various common editors
nnoremap <leader>ev :e ~/.vimrc<cr>
nnoremap <leader>ez :e ~/.zshrc<cr>
nnoremap <leader>ec :e ~/commands<cr>
nnoremap <leader>eq :e ~/dokumenti/quotes.txt<cr>
nnoremap <leader>en :e ~/dokumenti/notes.txt<cr>
nnoremap <leader>et :e ~/dokumenti/notes-tech.txt<cr>
nnoremap <leader>ed :e ~/dokumenti/drawing.txt<cr>
nnoremap <leader>es :e ~/dokumenti/scribble.txt<cr>
nnoremap <leader>eo :e ~/.config/openbox/rc.xml<cr>
nnoremap <leader>em :e ~/.config/openbox/menu.xml<cr>


" }}}

function! CleanDeleteBuffer()
    """ based on CleanClose function, found somewhere
    " just do not save the buffer under no circumstances
    let todelbufNr = bufnr("%")
    let newbufNr = bufnr("#")
    if ((newbufNr != -1) && (newbufNr != todelbufNr) && buflisted(newbufNr))
        exe "b".newbufNr
    else
        bnext
    endif

    if (bufnr("%") == todelbufNr)
        new
    endif
    exe "bd!".todelbufNr
endfunction

" close buffer leaving splits intact

map <leader>d <esc>:call CleanDeleteBuffer()<cr>

" automatically remove trailing whitespace before write
function! StripTrailingWhitespace()
  normal mZ
  %s/\s\+$//e
  normal `Z
endfunction


augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cursorline
    autocmd WinLeave * set nocursorline
augroup END


augroup javascript
    au!
    au FileType javascript setlocal nosmartindent autoindent ts=8 sts=2 sw=2
augroup END

augroup latex
    autocmd!
    autocmd FileType tex setlocal shiftwidth=2 softtabstop=2
    let g:tex_flavor = 'latex'
    let g:tex_fold_enable=1
augroup END

augroup Make
    autocmd!
    autocmd FileType make setlocal noexpandtab shiftwidth=8 tabstop=8
augroup END

augroup Haskell
    autocmd!
    autocmd FileType haskell setlocal expandtab shiftwidth=8 tabstop=8
augroup END

augroup OCaml
    autocmd!
    autocmd FileType ml,ocaml setlocal sts=2 ts=2 sw=2 expandtab
augroup END

augroup HTML
    autocmd!
    autocmd FileType html setlocal sts=2 ts=2 sw=2 expandtab
augroup END



augroup Python
    autocmd!
    autocmd FileType python setlocal expandtab ts=8 sw=2 sts=2 formatoptions+=croq smartindent
        \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
        \ keywordprg=pydoc
augroup END

augroup C
    autocmd!
    autocmd FileType c,cpp setlocal nolist tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab
augroup END

augroup PHP
    autocmd FileType php setlocal keywordprg=~/bin/phpdoc tabstop=4 shiftwidth=4
augroup END

augroup CZZ
    autocmd BufRead,BufNewFile *.czz set filetype=scss
augroup END

augroup Latex
    """ use internal help from bundle/latexhelp
    autocmd!
    autocmd FileType tex setlocal keywordprg=:help
augroup END

augroup Text
    autocmd!
    " autoflow paragrpahs
    autocmd FileType txt set formatoptions +=wa
augroup END

augroup MyPasswords
    autocmd!
    highlight Password ctermfg=252 ctermbg=252 guibg=orange guifg=orange
    au BufRead passwords.txt call matchadd('Password', '\v  \zs([^ ]+)\ze$')
    " au BufRead passwords.txt syn match Password /\v  \zs([^ ]+)\ze$/
augroup END

augroup Fugitive
    autocmd User fugitive
        \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
        \   nnoremap <buffer> .. :edit %:h<CR> |
        \ endif
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

""" subtly tell when lines are too long

""" highlight RedundantSpaces term=standout ctermbg=60 guibg=#555555
""" 
au BufRead,BufNew *.* call matchadd('Error', '\%80v.')
au BufRead,BufNew *.* call matchadd('Todo', '\v<\+\w+\+>')
""" au BufRead,BufNew *.* call matchadd('RedundantSpaces', '\s\+$\| \+\ze\t') "\ze sets end of match so only spaces highlighted
au BufRead,BufNew *.* call matchadd('Todo', '\v(!!!|///|###|;;;|---) .*$')


autocmd FileType inc setlocal syn=php

""" let's try the autosave on focus lost magic
""" single active window:
" au FocusLost * silent! update
""" all unsaved windows:
au FocusLost * silent! wa

function WriteFile()
    if (&buftype == "") && (expand("%:r") > "") && (&readonly==0)
        write
    endif
endfunction


" let g:space_no_character_movements = 1
let g:space_no_brace = 1
let g:space_no_folds = 1


au BufEnter *.ml,*.c,*.h,*.cpp,*.php :Rooter

" Don't screw up folds when inserting text that might affect them
" http://stackoverflow.com/questions/5521408/my-vim-and-gvim-are-far-too-slow
" http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif


" ,l highlights - and leaves highlighted - current line (:match removes)
:nnoremap <silent> <Leader>l ml:execute 'match RedundantSpaces /\%'.line('.').'l/'<CR>

:command! Wsudo w !sudo tee % > /dev/null


source ~/.vim/jeetworks-arrows.vim

if has("gui_running")
  set lines=40 columns=85
   " Make shift-insert work like in Xterm
   map <S-Insert> <MiddleMouse>
   map! <S-Insert> <MiddleMouse>
endif





" Hombrew session switcher
" ,s — open switcher
" sessions stored in ~/.vim/sessions
function! Switch(session)
    let dir = $HOME . '/.vim/sessions/'
    if ! isdirectory(dir) && exists('*mkdir')
        exec mkdir(dir, '', 0700)
    endif
    if (v:this_session != '')
        execute 'mksession!' v:this_session
    endif
    "execute "0,9000bd"
    execute "%bd"
    let n = dir . a:session . ".ex"
    if ( ! filereadable(n))
        execute 'mksession!' n
    endif
    echom n
    execute 'source' n
endfunction

map <leader>s :call Switch('')<left><left>

" vim: set fdm=marker :
