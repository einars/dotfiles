#!/usr/bin/env zsh

setopt nohup

export HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=1000
export LESS=eFX

eval "`dircolors -b`" 2>/dev/null
export LS_COLORS="ow=4" # all-writable folders are unreadable, so remove the formatting, leaving just underline

function try_path 
{
  test -d $1 && export PATH=$1:$PATH
}


try_path ~/bin
try_path ~/node/node-latest/bin
#try_path ~/node/modules/bin
try_path ~/.gem/ruby/2.4.0/bin
try_path ~/.gem/ruby/2.3.0/bin
try_path ~/.gem/ruby/2.2.0/bin
try_path ~/.gem/ruby/1.9.1/bin
try_path ~/bin/private
try_path ~/.pub-cache/bin
try_path /usr/lib/ccache/bin


# remove \0 from IFS
export IFS=${IFS/$'\0'}
export EDITOR=vim
export VISUAL=vim


export GVFS_DISABLE_FUSE=1
export SDL_AUDIODRIVER=alsa
# Joystick interface is preferred to evdev,
# as this gets calibrated
export SDL_JOYSTICK_DEVICE=/dev/input/js0
# export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.aatext=true -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -XX:+PerfDisableSharedMem"



autoload -Uz compinit
compinit

setopt INC_APPEND_HISTORY
#setopt SHARE_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE

setopt autocd
setopt extended_glob

setopt completeinword # global completion, not just end of word
setopt alwaystoend    # when completed from inside of word, move to an end
setopt histverify     # confirm "!" commands


host=$(uname -n)

function maybe_source() {
    test -f $1 && source $1
}


function setup_prompt() #{{{
{
    # http://www.acm.uiuc.edu/workshops/zsh/prompt/escapes.html
    fg_red=%{$'\e[0;31m'%}
    fg_green=%{$'\e[0;32m'%}
    fg_yellowish=%{$'\e[0;33m'%}
    fg_brownish=%{$'\e[0;35m'%}
    fg_bluish=%{$'\e[0;36m'%}
    reset_color=%{$'\e[0m'%}

    prefix_sc_branch() {
        (( $+SCHROOT_USER )) && echo -n ${fg_green}arch32 $reset_color
        [ -z $BRANCH ] && [ -d .svn ] && BRANCH=`svn info 2>/dev/null| grep Revision | awk '{print "svn:"$2}'`
        [ -z $BRANCH ] && [ -d .git -o -d ../.git -o -d ../../.git -o -d ../../../.git ] && \
          BRANCH=$(\
            GIT_PS1_SHOWDIRTYSTATE=1 \
            GIT_PS1_SHOWSTASHSTATE=1 \
            GIT_PS1_SHOWUNTRACKEDFILES=1 \
            GIT_PS1_SHOWCOLORHINTS=1 \
            GIT_PS1_SHOWUPSTREAM=verbose \
            GIT_PS1_DESCRIBE_STYLE=branch \
            __git_ps1 "%s")
        [ -z $BRANCH ] || echo "${fg_bluish}${BRANCH} "
    }


    prefix_user_host() {
        # prefix user, host or user@host depending on non-defaultness

        HOST_PART=$host
        USER_PART=$USER

        if [[ $SSH_CONNECTION = '' && $USER != 'root' ]] {
            # don't print host when on localhost
            # (i.e print host for remotely connected systems, etc)
            HOST_PART=
        }
        if [[ $USER = 'e' || $USER = 'root' ]] {
            USER_PART=
        }
        if [[ $HOST_PART != '' || $USER_PART != '' ]] {
            echo -n $fg_brownish
            if [[ $USER_PART != '' ]] {
                echo -n $USER_PART
            }
            if [[ $HOST_PART != '' && $USER_PART != '' ]] {
                echo -n '@'
            }
            if [[ $HOST_PART != '' ]] {
                echo -n $HOST_PART
            }
            echo -n "$reset_color "
        }
    }

    prefix_pwd() {
        if [[ `id -u` == "0" ]] {
            echo -n $fg_red;
        }
        pwd
    }

    setopt PROMPT_SUBST
    export PROMPT="`prefix_user_host`\`prefix_pwd\` \`prefix_sc_branch\`%(?,$fg_green,$fg_red)%#$reset_color "
    export RPROMPT="%(?,,$fg_red( %? %)$reset_color"
} #}}}

function setup_keyboard() #{{{
{
    # http://codeinthehole.com/archives/17-The-most-important-command-line-tip-incremental-history-searching-with-.inputrc.html
    # create a zkbd compatible hash;
    # to add other keys to this hash, see: man 5 terminfo

    bindkey -e

    # drop ^s-^q flow control
    stty stop '^-'
    stty start '^-'

    # ^z has better uses than suspend
    stty susp ''

    typeset -A key

    key[Home]=${terminfo[khome]}
    key[End]=${terminfo[kend]}
    key[Insert]=${terminfo[kich1]}
    key[Delete]=${terminfo[kdch1]}
    key[Up]=${terminfo[kcuu1]}
    key[Down]=${terminfo[kcud1]}
    key[Left]=${terminfo[kcub1]}
    key[Right]=${terminfo[kcuf1]}
    key[PageUp]=${terminfo[kpp]}
    key[PageDown]=${terminfo[knp]}

    #for k in ${(k)key} ; do
        ## $terminfo[] entries are weird in ncurses application mode...
        #[[ ${key[$k]} == $'\eO'* ]] && key[$k]=${key[$k]/O/[}
    #done
    unset k

    # setup key accordingly
    [[ -n "${key[Home]}"    ]]  && bindkey  -- "${key[Home]}"    beginning-of-line
    [[ -n "${key[End]}"     ]]  && bindkey  -- "${key[End]}"     end-of-line
    [[ -n "${key[Insert]}"  ]]  && bindkey  -- "${key[Insert]}"  overwrite-mode
    [[ -n "${key[Delete]}"  ]]  && bindkey  -- "${key[Delete]}"  delete-char
    [[ -n "${key[Up]}"      ]]  && bindkey  -- "${key[Up]}"      history-beginning-search-backward
    [[ -n "${key[Down]}"    ]]  && bindkey  -- "${key[Down]}"    history-beginning-search-forward
    [[ -n "${key[Left]}"    ]]  && bindkey  -- "${key[Left]}"    backward-char
    [[ -n "${key[Right]}"   ]]  && bindkey  -- "${key[Right]}"   forward-char
    [[ -n "${key[Left]}" ]]  && bindkey  -- "\e${key[Left]}"  emacs-backward-word
    [[ -n "${key[Right]}" ]] && bindkey  -- "\e${key[Right]}" emacs-forward-word

    bindkey "^J" self-insert # sweet multiline input

    [[ "$TERM" == "rxvt-unicode-256color" ]] && bindkey  -- "^[[1~" beginning-of-line
    [[ "$TERM" == "rxvt-unicode-256color" ]] && bindkey  -- "^[[4~" end-of-line
    [[ "$TERM" == "rxvt-256color" ]] && bindkey  -- "^[[1~" beginning-of-line
    [[ "$TERM" == "rxvt-256color" ]] && bindkey  -- "^[[4~" end-of-line
} #}}}

function setup_cd_autols() #{{{
{
    function cd_hook()
    {
        SKIPPED_DIRS=(/usr/bin /usr/lib)
        DIR=`pwd`
        test -f .description && cat .description
        test -f  description && cat  description
        if [[ -z ${(M)SKIPPED_DIRS:#$DIR} ]] {
            ls --color=tty --si -l --group-directories-first --time-style=+
        }
    }

    chpwd_functions=('cd_hook')

} #}}}


# g+w
umask 0002

setup_prompt
setup_keyboard
setup_cd_autols

maybe_source ~/.zsh/aliases
maybe_source ~/.zsh/aliases.private

maybe_source /usr/share/git/git-prompt.sh


if test -f ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh; then
    source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    # override some colors:
    ZSH_HIGHLIGHT_STYLES[default]='none'
    ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=red,bold,underline'
    ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=green'
    ZSH_HIGHLIGHT_STYLES[alias]='fg=green'
    ZSH_HIGHLIGHT_STYLES[builtin]='fg=green,bold'
    ZSH_HIGHLIGHT_STYLES[function]='fg=green'
    ZSH_HIGHLIGHT_STYLES[command]='fg=green,bold'
    ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=red,bold,standout'
    ZSH_HIGHLIGHT_STYLES[path]='fg=white,underline'
    ZSH_HIGHLIGHT_STYLES[globbing]='fg=white,bold'
    ZSH_HIGHLIGHT_STYLES[history-expansion]='fg=green'
    ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=blue'
    ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=blue'
    ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]='fg=red,bold'
    ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]='fg=red'
    ZSH_HIGHLIGHT_STYLES[assign]='fg=green,bold'
    ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=cyan,bold'
    ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=cyan'
fi


compdef -d git # i'm smarter and faster

# OPAM configuration
. /home/e/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# shift-tab to force filename completions
zle -C complete complete-word complete-files
bindkey '^[[Z' complete
complete-files () { compadd - $PREFIX* }

maybe_source ~/.zsh/zsh.$host

# vim: set fdm=marker :


export PATH="$HOME/.yarn/bin:$PATH"
