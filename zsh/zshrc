#!/usr/bin/env zsh

setopt nohup

export HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=1000

eval "`dircolors -b`" 2>/dev/null
export LS_COLORS="ow=4" # all-writable folders are unreadable, so remove the formatting, leaving just underline

test -d ~/bin && export PATH=~/bin:$PATH
test -d ~/bin/private && export PATH=~/bin/private:$PATH
test -d /usr/lib/ccache/bin && export PATH=/usr/lib/ccache/bin:$PATH
test -d ~/.odb/bin && export PATH=$PATH:~/.odb/bin


# remove \0 from IFS
export IFS=${IFS/$'\0'}
export EDITOR=vim
export VISUAL=vim
export OOO_FORCE_DESKTOP=gnome


autoload -Uz compinit
compinit

setopt INC_APPEND_HISTORY
#setopt SHARE_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE

setopt autocd
setopt extended_glob

setopt completeinword # global completion, not just end of word
setopt alwaystoend    # when completed from inside of word, move to an end
setopt histverify     # confirm "!" commands


host=$(uname -n)

function maybe_source() {
    test -f $1 && source $1
}


function setup_prompt() #{{{
{
    # http://www.acm.uiuc.edu/workshops/zsh/prompt/escapes.html
    fg_red=%{$'\e[0;31m'%}
    fg_green=%{$'\e[0;32m'%}
    fg_yellowish=%{$'\e[0;33m'%}
    fg_brownish=%{$'\e[0;35m'%}
    fg_bluish=%{$'\e[0;36m'%}
    reset_color=%{$'\e[0m'%}

    prefix_sc_branch() {
        (( $+SCHROOT_USER )) && echo -n ${fg_green}arch32 $reset_color
        [ -z $BRANCH ] && [ -d .svn ] && BRANCH=`svn info 2>/dev/null| grep Revision | awk '{print "svn:"$2}'`
        [ -z $BRANCH ] && [ -d .git -o -d ../.git -o -d ../../.git -o -d ../../../.git ] && BRANCH=`git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
        [ -z $BRANCH ] || echo "${fg_bluish}${BRANCH} "
    }


    prefix_user_host() {
        # prefix user, host or user@host depending on non-defaultness

        HOST_PART=$host
        USER_PART=$USER

        if [[ $SSH_CONNECTION = '' && $USER != 'root' ]] {
            # don't print host when on localhost
            # (i.e print host for remotely connected systems, etc)
            HOST_PART=
        }
        if [[ $USER = 'e' || $USER = 'root' ]] {
            USER_PART=
        }
        if [[ $HOST_PART != '' || $USER_PART != '' ]] {
            echo -n $fg_brownish
            if [[ $USER_PART != '' ]] {
                echo -n $USER_PART
            }
            if [[ $HOST_PART != '' && $USER_PART != '' ]] {
                echo -n '@'
            }
            if [[ $HOST_PART != '' ]] {
                echo -n $HOST_PART
            }
            echo -n "$reset_color "
        }
    }

    prefix_pwd() {
        if [[ `id -u` == "0" ]] {
            echo -n $fg_red;
        }
        pwd
    }

    setopt PROMPT_SUBST
    export PROMPT="`prefix_user_host`\`prefix_pwd\` \`prefix_sc_branch\`%(?,$fg_green,$fg_red)%#$reset_color "
    export RPROMPT="%(?,,$fg_red( %? %)$reset_color"
} #}}}

function setup_keyboard() #{{{
{
    # http://codeinthehole.com/archives/17-The-most-important-command-line-tip-incremental-history-searching-with-.inputrc.html
    # create a zkbd compatible hash;
    # to add other keys to this hash, see: man 5 terminfo

    bindkey -e

    # drop ^s-^q flow control
    stty stop '^-'
    stty start '^-'

    typeset -A key

    key[Home]=${terminfo[khome]}
    key[End]=${terminfo[kend]}
    key[Insert]=${terminfo[kich1]}
    key[Delete]=${terminfo[kdch1]}
    key[Up]=${terminfo[kcuu1]}
    key[Down]=${terminfo[kcud1]}
    key[Left]=${terminfo[kcub1]}
    key[Right]=${terminfo[kcuf1]}
    key[PageUp]=${terminfo[kpp]}
    key[PageDown]=${terminfo[knp]}

    key[AltLeft]="^[^[[D"
    key[AltRight]="^[^[[C"

    for k in ${(k)key} ; do
        # $terminfo[] entries are weird in ncurses application mode...
        [[ ${key[$k]} == $'\eO'* ]] && key[$k]=${key[$k]/O/[}
    done
    unset k

    # setup key accordingly
    [[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
    [[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
    [[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
    [[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
    [[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      history-beginning-search-backward
    [[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    history-beginning-search-forward
    [[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
    [[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char
    [[ -n "${key[AltLeft]}" ]]  && bindkey  "${key[AltLeft]}"  emacs-backward-word
    [[ -n "${key[AltRight]}" ]]  && bindkey  "${key[AltRight]}" emacs-forward-word

    bindkey "^J" self-insert # sweet multiline input
} #}}}

function setup_cd_autols() #{{{
{
    function cd_hook()
    {
        SKIPPED_DIRS=(/usr/bin /usr/lib)
        DIR=`pwd`
        test -f .description && cat .description
        test -f  description && cat  description
        if [[ -z ${(M)SKIPPED_DIRS:#$DIR} ]] {
            ls --color=tty --si -l --group-directories-first --time-style=+
        }
    }

    chpwd_functions=('cd_hook')

} #}}}



setup_prompt
setup_keyboard
setup_cd_autols

maybe_source ~/.zsh/aliases
maybe_source ~/.zsh/aliases.private
maybe_source ~/.zsh/zshrc.$host


if [[ $host == "sparta" ]]; then
    cdpath=(. ~ /services/web/localhost /services/web/dev.spicausis.lv /services/web /storage /storage/studijas)

    function c() {
        CDPATH= cd $1
    }

    alias ppp="cd ~/.wine/drive_c/Program\ Files/"

fi

# g+w
umask 0002

maybe_source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

compdef -d git # i'm smarter and faster

# vim: set fdm=marker :
