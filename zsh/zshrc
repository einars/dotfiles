#!/usr/bin/env zsh

setopt nohup

export HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=1000
export LESS=eFX

#eval "`dircolors -b`" 2>/dev/null
#export LS_COLORS="ow=4" # all-writable folders are unreadable, so remove the formatting, leaving just underline


function try_path 
{
  test -d $1 && export PATH=$1:$PATH
}


try_path ~/bin
try_path ~/node/node-latest/bin
try_path ~/node/modules/bin
try_path ~/bin/private
try_path ~/.pub-cache/bin    # dart
try_path /usr/lib/ccache/bin # ccache
try_path ~/.opam/system/bin  # opam
try_path ~/.cargo/bin        # rust
try_path ~/.yarn/bin         # yarn
try_path ~/.local/bin         # yarn

if type nvim &> /dev/null; then
  export EDITOR=nvim
  export VISUAL=nvim
else
  export EDITOR=vim
  export VISUAL=vim
fi


export GVFS_DISABLE_FUSE=1
export SDL_AUDIODRIVER=alsa
# Joystick interface is preferred to evdev,
# as this gets calibrated
export SDL_JOYSTICK_DEVICE=/dev/input/js0
# export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.aatext=true -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -XX:+PerfDisableSharedMem"



autoload -Uz compinit colors
# https://gist.github.com/ctechols/ca1035271ad134841284
for dump in ~/.zcompdump(N.mh+24); do
  compinit
done

compinit -C
compdef -d git # i'm smarter and faster

# remove \0 from IFS
#export IFS=${IFS/$'\0'}
# Somehow breaks completions if done before compinit
export IFS=$'\n\t'



setopt INC_APPEND_HISTORY
setopt EXTENDED_HISTORY
#setopt SHARE_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE

setopt autocd
setopt extended_glob

setopt completeinword # global completion, not just end of word
setopt alwaystoend    # when completed from inside of word, move to an end
setopt histverify     # confirm "!" commands


host=$(uname -n)

function maybe_source() {
    test -f $1 && source $1
}


function setup_prompt() #{{{
{
    # http://www.acm.uiuc.edu/workshops/zsh/prompt/escapes.html
    fg_red=%{$'\e[0;31m'%}
    fg_green=%{$'\e[0;32m'%}
    fg_yellowish=%{$'\e[0;33m'%}
    fg_brownish=%{$'\e[0;35m'%}
    fg_bluish=%{$'\e[0;34m'%}
    reset_color=%{$'\e[0m'%}

    git_branch() {
      GIT_PS1_SHOWDIRTYSTATE=1 \
      GIT_PS1_SHOWSTASHSTATE=1 \
      GIT_PS1_SHOWUNTRACKEDFILES=1 \
      GIT_PS1_SHOWCOLORHINTS=1 \
      GIT_PS1_SHOWUPSTREAM=verbose \
      GIT_PS1_DESCRIBE_STYLE=branch \
      __git_ps1 "%s"
    }

    alien_git_branch() {
      GIT_PS1_SHOWDIRTYSTATE= \
      GIT_PS1_SHOWSTASHSTATE= \
      GIT_PS1_SHOWUNTRACKEDFILES= \
      GIT_PS1_SHOWCOLORHINTS=1 \
      GIT_PS1_SHOWUPSTREAM= \
      GIT_PS1_DESCRIBE_STYLE=branch \
      __git_ps1 "%s (read-only)"
    }

    prefix_sc_branch() {
        (( $+SCHROOT_USER )) && echo -n ${fg_green}arch32 $reset_color
        [ -z $BRANCH ] && [ -d .svn ] && BRANCH=`svn info 2>/dev/null| grep Revision | awk '{print "svn:"$2}'`
        # writable and inaccessible git branches need different treatments
        [ -z $BRANCH ] && [ -d .git ] && [ -w .git/config ] && BRANCH=$(git_branch)
        [ -z $BRANCH ] && [ -d ../.git ] && [ -w ../.git/config ] && BRANCH=$(git_branch)
        [ -z $BRANCH ] && [ -d ../../.git ] && [ -w ../../.git/config ] && BRANCH=$(git_branch)
        [ -z $BRANCH ] && [ -d .git ] && [ ! -w .git/config ] && BRANCH=$(alien_git_branch)
        [ -z $BRANCH ] && [ -d ../.git ] && [ ! -w ../.git/config ] && BRANCH=$(alien_git_branch)
        [ -z $BRANCH ] && [ -d ../../.git ] && [ ! -w ../../.git/config ] && BRANCH=$(alien_git_branch)
        [ -z $BRANCH ] || echo "${fg_bluish}${BRANCH} "
    }


    prefix_user_host() {
        # prefix user, host or user@host depending on non-defaultness

        HOST_PART=$host
        USER_PART=$USER

        if [[ $SSH_CONNECTION = '' && $USER != 'root' ]] {
            # don't print host when on localhost
            # (i.e print host for remotely connected systems, etc)
            HOST_PART=
        }
        if [[ $USER = 'e' || $USER = 'root' ]] {
            USER_PART=
        }
        if [[ $HOST_PART != '' || $USER_PART != '' ]] {
            echo -n $fg_brownish
            if [[ $USER_PART != '' ]] {
                echo -n $USER_PART
            }
            if [[ $HOST_PART != '' && $USER_PART != '' ]] {
                echo -n '@'
            }
            if [[ $HOST_PART != '' ]] {
                echo -n $HOST_PART
            }
            echo -n "$reset_color "
        }
    }

    prefix_pwd() {
        if [[ `id -u` == "0" ]] {
            echo -n $fg_red;
        }
        pwd
    }

    setopt PROMPT_SUBST
    export PROMPT="`prefix_user_host`\`prefix_pwd\` \`prefix_sc_branch\`%(?,$fg_green,$fg_red)%#$reset_color "
    export RPROMPT="%(?,,$fg_red( %? %)$reset_color"
} #}}}

function setup_keyboard() 
{
    bindkey -e

    # drop ^s-^q flow control
    stty stop '^-'
    stty start '^-'

    # ^z has better uses than suspend
    stty susp ''

    # to see the keys generated by the terminal:
    # sed -n l

    # urxvt/tmux
    bindkey '\e[1~' beginning-of-line
    bindkey '\e[4~' end-of-line

    # st
    bindkey '\e[H' beginning-of-line
    bindkey '\e[3~' delete-char
    bindkey '\e[5~' up-line-or-history # pgup
    bindkey '\e[6~' down-line-or-history # pgdn

    bindkey '\e[1;5D' emacs-backward-word # ctrl-left
    bindkey '\e[1;5C' emacs-forward-word # ctrl-right

    bindkey "^H" backward-kill-word # c-backspace

    bindkey "^J" self-insert # sweet multiline input

}

function setup_cd_autols()
{
    function cd_hook()
    {
        SKIPPED_DIRS=(/usr/bin /usr/lib)
        DIR=`pwd`
        test -f .description && cat .description
        test -f  description && cat  description
        if [[ -z ${(M)SKIPPED_DIRS:#$DIR} ]] {
            ls --color=tty --si -l --group-directories-first --time-style=+
        }
    }

    chpwd_functions=('cd_hook')

}


# g+w
umask 0002

disable r

setup_prompt
setup_keyboard
setup_cd_autols

maybe_source ~/.zsh/aliases
maybe_source ~/.zsh/aliases.private

maybe_source /usr/share/git/git-prompt.sh

# shift-tab to force filename completions
zle -C complete complete-word complete-files
bindkey '^[[Z' complete
complete-files () { compadd - $PREFIX* }

maybe_source ~/.zsh/zsh.$host

if test -f ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh; then
    source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

